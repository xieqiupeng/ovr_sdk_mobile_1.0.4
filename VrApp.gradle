import org.gradle.internal.os.OperatingSystem;
import com.android.ddmlib.AndroidDebugBridge
import com.android.ddmlib.IDevice
import com.android.ddmlib.CollectingOutputReceiver

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }

}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

class VrAppPlugin implements Plugin<Project> {
    Project project = null
    // location of VrDriver TODO if we stick with this method,
    // maybe VrDriver can be placed somewhere more accessible
    // to the rest of the build
    String vrdriverDir = null

    // per-device methods //

    void checkOsig(IDevice device, String deviceSerial, FileTree sigDir) {
        def oculusSig = "oculussig_${deviceSerial}"
        if (sigDir.matching { include "**/${oculusSig}" }.isEmpty()) {
            throw new RuntimeException("Missing ${oculusSig}. You can generate this file at http://developer.oculus.com/osig/", null)
        }
    }

    void clearAdbLog(IDevice device) {
        CollectingOutputReceiver receiver = new CollectingOutputReceiver()
        device.executeShellCommand("logcat -c", receiver)
    }

    void installApk(IDevice device, File apkFile, String applicationId) {
        project.logger.quiet "Installing ${applicationId} on device ${device.serialNumber}"

        String toinstall = "/data/local/tmp/toinstall.apk"

        try {
            device.pushFile(apkFile.path, toinstall)
        } catch (Exception e) {
            throw new RuntimeException("Failed to push ${apkFile.path} to ${toinstall}. ${e}", e)
        }

        while (true) {
            try {
                device.installRemotePackage(toinstall, true)
                break
            } catch (Exception e) {
                project.logger.quiet "Failed to install ${applicationId} on device ${device.serialNumber} (${e}). Trying to uninstall first."
            }
            // this only needs to happen if we fail to install (i.e. not having matching sigs)
            stopApk(device, "com.oculus.home")
            stopApk(device, "com.oculus.horizon")
            try {
                device.uninstallPackage(applicationId)
            } catch (Exception e) {
                throw new RuntimeException("Failed to uninstall ${applicationId}. ${e}", e)
            }
        }
    }

    Boolean installVrDriver(IDevice device, String localPath) {
        if (new File(localPath).exists() == false) {
            project.logger.lifecycle "Did not find local VrDriver (checked ${localPath}); skipping installation"
            return false
        }

        project.logger.lifecycle "Found VrDriver at ${localPath}; installing"

        // Uninstall the existing VrDriver
        // should throw exception on failure
        installApk(device, new File(localPath), "com.oculus.systemdriver")
        return true
    }

    Boolean conditionalInstallVrDriver(IDevice device, String localPath) {
        def remotePath = getRemoteApkPath(device, "com.oculus.systemdriver")
        def remoteMd5 = getRemoteMd5(device, remotePath)
        project.ext.localMd5 = null

        project.ant.checksum(file: localPath, readbuffersize: 4096)
        // TODO store in property
        File localMd5File = new File(localPath + ".MD5")
        def localMd5 = null
        localMd5File.eachLine { line ->
            localMd5 = line
            return
        }
        if (localMd5 == remoteMd5) {
            project.logger.lifecycle("VrDriver currently installed matches local version; skipping reinstallation")
            return true
        }
        project.logger.quiet '*********************************************************************************************'
        project.logger.quiet 'VrDriver that is currently installed does not match the local version, reinstalling!'
        project.logger.quiet '*********************************************************************************************'
        return installVrDriver(device, localPath)
    }

    String getRemoteMd5(IDevice device, String path) {
        CollectingOutputReceiver receiver = new CollectingOutputReceiver()
        path = path.replaceFirst(/.*package:( \w+ )*/, '$1').trim()
        try {
            device.executeShellCommand("if [ -f /system/bin/md5 ]; then md5 $path; else md5sum $path; fi", receiver)
        } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) {
            return null
        }
        def output = receiver.getOutput().split()
        if (output[1] == path) {
            return output[0]
        }
        return null
    }

    String getRemoteApkPath(IDevice device, String packageName) {
        CollectingOutputReceiver receiver = new CollectingOutputReceiver()
        project.logger.lifecycle "pm path $packageName"
        device.executeShellCommand("pm path $packageName", receiver)
        return receiver.getOutput()
    }

    void stopApk(IDevice device, String packageName) {
        CollectingOutputReceiver receiver = new CollectingOutputReceiver()
        device.executeShellCommand("am force-stop ${packageName}", receiver)
    }

    void runApk(IDevice device, manifestFile) {
        CollectingOutputReceiver receiver = new CollectingOutputReceiver()
        def activityClass = new XmlSlurper().parse(manifestFile).application.activity.find {
            it.'intent-filter'.find { filter ->
                return filter.action.find {
                    it.'@android:name'.text() == 'android.intent.action.MAIN'
                } \
             && filter.category.find {
                    it.'@android:name'.text() == 'android.intent.category.LAUNCHER'
                }
            }
        }.'@android:name'
        def startActivity = "${project.android.defaultConfig.applicationId}/${activityClass}"
        project.logger.quiet "Starting \'$startActivity\' on ${project.deviceMap.size()} devices:"
        project.logger.quiet "- ${device.serialNumber}"
        device.executeShellCommand("am start $startActivity", receiver)
    }

    void apply(Project project) {
        this.project = project
        this.vrdriverDir = "${project.rootProject.projectDir}/VrDriver/Projects/Android/build/outputs/apk"
        project.afterEvaluate {

            Task initDeviceList = project.task("initDeviceList()") << {
                AndroidDebugBridge.initIfNeeded(false)
                AndroidDebugBridge bridge = AndroidDebugBridge.createBridge(project.android.getAdbExe().absolutePath, false)

                long timeOut = 30000 // 30 sec
                int sleepTime = 1000
                while (!bridge.hasInitialDeviceList() && timeOut > 0) {
                    sleep(sleepTime)
                    timeOut -= sleepTime
                }
                if (timeOut <= 0 && !bridge.hasInitialDeviceList()) {
                    throw new RuntimeException("Timeout getting device list.", null)
                }

                project.ext.deviceMap = [:]
                // if a device is connected both physically and over the network, only include the physical ID
                if (project.hasProperty("should_install") == true) {
                    bridge.devices.split { it.getProperty("ro.serialno") != it.serialNumber }.each {
                        it.collectEntries(project.deviceMap, {
                            [(it.getProperty("ro.serialno")): it]
                        })
                    }
                }
            }

            // tasks for build, install and run
            project.clean.dependsOn "NDKBuildClean"

            project.task("stopApk", dependsOn: initDeviceList) {
                description "Stops app if currently running on device"
            } << {
                project.deviceMap.each { deviceSerial, device ->
                    stopApk(device, android.defaultConfig.applicationId)
                }
            }

            project.task("OSigPreCheck", dependsOn: initDeviceList) {
                description "Checks for Oculus Signature files"
                onlyIf {
                    project.deviceMap.size() != 0 &&
                            project.hasProperty("disable_sig_check") == false
                }
            } << {
                def iterator = project.deviceMap.entrySet().iterator()
                while (iterator.hasNext()) {
                    def deviceElem = iterator.next()
                    if (!deviceElem.value.isOnline()) {
                        iterator.remove()
                        continue
                    }
                    String deviceSerial = deviceElem.key
                    IDevice device = deviceElem.value
                    checkOsig(device, deviceSerial, project.fileTree(dir: "../../assets").plus(project.fileTree(dir: "assets")))
                }

            }

            project.android.applicationVariants.all { variant ->

                Task OSigPostCheck = project.task("OSigPostCheck${variant.name.capitalize()}", dependsOn: variant.assemble) {
                    description "Checks for Oculus Signature files in the output apk"
                    onlyIf {
                        project.deviceMap.size() != 0 &&
                                project.hasProperty("disable_sig_check") == false
                    }
                    dependsOn project.OSigPreCheck
                } << {
                    variant.outputs.each { output ->
                        def sigfiles = project.zipTree(output.outputFile).matching {
                            include "assets/oculussig*"
                        }
                        def iterator = project.deviceMap.entrySet().iterator()
                        while (iterator.hasNext()) {
                            def deviceElem = iterator.next()
                            if (!deviceElem.value.isOnline()) {
                                iterator.remove()
                                continue
                            }
                            String deviceSerial = deviceElem.key
                            IDevice device = deviceElem.value
                            checkOsig(device, deviceSerial, sigfiles)
                        }
                    }
                }

                Task installVrDriver = project.task("conditionalInstallVrDriver${variant.name.capitalize()}") {
                    dependsOn variant.assemble
                } << {
                    File vrdriverApk = new File("${vrdriverDir}/VrDriver-${variant.name}.apk")
                    if (vrdriverApk.exists()) {

                        project.deviceMap.each { deviceSerial, device ->
                            conditionalInstallVrDriver(device, vrdriverApk.path)
                        }

                    } else {
                        project.logger.warn "Expected VrDriver at ${vrdriverApk.path}: apk not found!"
                    }
                }

                Task installAndRun = project.task("installAndRun${variant.name.capitalize()}") {
                    dependsOn variant.assemble
                    dependsOn OSigPostCheck
                    dependsOn installVrDriver
                    onlyIf { project.hasProperty("should_install") }
                    description "Installs and runs the APK file"
                } << {
                    variant.outputs.each { output ->
                        if (output.outputFile.exists()) {
                            if (project.deviceMap.size() == 0) {
                                project.logger.quiet "Install requested, but no devices found."
                            } else {
                                project.deviceMap.each { deviceSerial, device ->
                                    installApk(device, output.outputFile, project.android.defaultConfig.applicationId)
                                    if (project.hasProperty("clear_logcat")) {
                                        clearAdbLog(device)
                                    }
                                    runApk(device, variant.outputs.processManifest.manifestOutputFile)
                                }
                            }
                        }
                    }
                }
                variant.assemble.dependsOn project.OSigPreCheck
                variant.assemble.finalizedBy installAndRun
                variant.ndkCompile.dependsOn(project.tasks["NDKBuild${variant.name.capitalize()}"])
            }
        }
    }
}

apply plugin: VrAppPlugin 
